services:
  vehicleregistrationdb:
    image: postgres:16
    container_name: vehicleregistrationdb
    environment:
      - POSTGRES_DB=VehicleRegistrationDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Frankenstein@123
    ports:
      - "5433:5432"
    volumes:
      - vehicleregdbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  insurancedb:
    image: postgres:16
    container_name: insurancedb
    environment:
      - POSTGRES_DB=InsuranceDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Frankenstein@123
    ports:
      - "5434:5432"
    volumes:
      - insurancedbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  vehicleregistrationapi:
    build:
      context: ./VehicleRegistrationAPI
      dockerfile: Dockerfile
    container_name: vehicleregistrationapi
    ports:
      - "5059:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=vehicleregistrationdb;Port=5432;Database=VehicleRegistrationDB;Username=postgres;Password=Frankenstein@123
    depends_on:
      vehicleregistrationdb:
        condition: service_healthy

  insuranceapi:
    build:
      context: ./InsuranceAPI
      dockerfile: Dockerfile
    container_name: insuranceapi
    ports:
      - "5084:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=insurancedb;Port=5432;Database=InsuranceDB;Username=postgres;Password=Frankenstein@123
    depends_on:
      insurancedb:
        condition: service_healthy

volumes:
  vehicleregdbdata:
  insurancedbdata: