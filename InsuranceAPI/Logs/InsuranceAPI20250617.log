2025-06-17 01:05:34.413 +02:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:05:34.563 +02:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-06-17 01:05:34.567 +02:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-06-17 01:05:34.569 +02:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-06-17 01:05:34.570 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:05:34.573 +02:00 [INF] Applying migration '20250616230531_UpdateSeedData'.
2025-06-17 01:05:34.587 +02:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Insurances" ("Id", "CreatedAt", "EndDate", "InsuranceProductId", "InsuredItem", "PersonalIdentificationNumber", "StartDate")
VALUES ('a1e1b2c3-d4e5-4f6a-8b7c-9d0e1f2a3b4c', TIMESTAMPTZ '2024-01-01T00:00:00Z', TIMESTAMPTZ '2025-01-01T00:00:00Z', 'ca536771-42b8-4f55-8014-7e98c6c7b060', 'Car', 'PIN1001', TIMESTAMPTZ '2024-01-01T00:00:00Z');
INSERT INTO "Insurances" ("Id", "CreatedAt", "EndDate", "InsuranceProductId", "InsuredItem", "PersonalIdentificationNumber", "StartDate")
VALUES ('b2e2c3d4-e5f6-4a8b-7c9d-0e1f2a3b4c5d', TIMESTAMPTZ '2024-02-01T00:00:00Z', TIMESTAMPTZ '2025-02-01T00:00:00Z', 'def55e24-40c9-4234-825a-bbf4319fc79b', 'Health', 'PIN1002', TIMESTAMPTZ '2024-02-01T00:00:00Z');
INSERT INTO "Insurances" ("Id", "CreatedAt", "EndDate", "InsuranceProductId", "InsuredItem", "PersonalIdentificationNumber", "StartDate")
VALUES ('c3d4e5f6-a8b7-4c9d-0e1f-2a3b4c5d6e7f', TIMESTAMPTZ '2024-03-01T00:00:00Z', TIMESTAMPTZ '2025-03-01T00:00:00Z', 'b43c53a0-1c57-4c9c-94a1-673d7db31fcf', 'Pet', 'PIN1003', TIMESTAMPTZ '2024-03-01T00:00:00Z');
2025-06-17 01:05:34.588 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250616230531_UpdateSeedData', '9.0.2');
2025-06-17 01:21:39.720 +02:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:21:39.862 +02:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-06-17 01:21:39.865 +02:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-06-17 01:21:39.866 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-06-17 01:21:39.866 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:21:39.870 +02:00 [INF] Applying migration '20250616232136_UpdateNewData'.
2025-06-17 01:21:39.873 +02:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250616232136_UpdateNewData', '9.0.2');
2025-06-17 01:30:11.072 +02:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:30:11.218 +02:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-06-17 01:30:11.221 +02:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-06-17 01:30:11.222 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-06-17 01:30:11.222 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:30:11.225 +02:00 [INF] Applying migration '20250616233007_InitialCreate'.
2025-06-17 01:30:11.244 +02:00 [ERR] Failed executing DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "InsuranceProducts" (
    "Id" uuid NOT NULL,
    "Name" character varying(50) NOT NULL,
    "Code" character varying(15) NOT NULL,
    "Price" numeric(18,2) NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL DEFAULT (NOW()),
    "UpdatedAt" timestamp with time zone NOT NULL DEFAULT (NOW()),
    CONSTRAINT "PK_InsuranceProducts" PRIMARY KEY ("Id")
);
2025-06-17 01:31:46.264 +02:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:31:46.404 +02:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-06-17 01:31:46.408 +02:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-06-17 01:31:46.408 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-06-17 01:31:46.409 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-06-17 01:31:46.412 +02:00 [INF] Applying migration '20250616233007_InitialCreate'.
2025-06-17 01:31:46.427 +02:00 [ERR] Failed executing DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "InsuranceProducts" (
    "Id" uuid NOT NULL,
    "Name" character varying(50) NOT NULL,
    "Code" character varying(15) NOT NULL,
    "Price" numeric(18,2) NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL DEFAULT (NOW()),
    "UpdatedAt" timestamp with time zone NOT NULL DEFAULT (NOW()),
    CONSTRAINT "PK_InsuranceProducts" PRIMARY KEY ("Id")
);
2025-06-17 01:46:58.717 +02:00 [INF] Now listening on: http://localhost:5096
2025-06-17 01:46:58.748 +02:00 [INF] Application started. Press Ctrl+C to shut down.
2025-06-17 01:46:58.748 +02:00 [INF] Hosting environment: Development
2025-06-17 01:46:58.748 +02:00 [INF] Content root path: /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI
2025-06-17 01:46:58.977 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:5096/weatherforecast - null null
2025-06-17 01:46:59.135 +02:00 [WRN] Failed to determine the https port for redirect.
2025-06-17 01:46:59.142 +02:00 [INF] Request finished HTTP/1.1 GET http://localhost:5096/weatherforecast - 404 0 null 165.3806ms
2025-06-17 01:46:59.151 +02:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:5096/weatherforecast, Response status code: 404
2025-06-17 01:47:17.737 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:5096/api/v1/insurances - null null
2025-06-17 01:47:17.741 +02:00 [INF] Executing endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:47:18.055 +02:00 [INF] No data found in cache for key: AllInsurances
2025-06-17 01:47:18.556 +02:00 [ERR] An error occurred using the connection to database 'InsuranceDB' on server 'tcp://127.0.0.1:5432'.
2025-06-17 01:47:18.570 +02:00 [ERR] An exception occurred while iterating over the results of a query for context type 'InsuranceAPI.Data.InsuranceDbContext'.
Npgsql.PostgresException (0x80004005): 3D000: database "InsuranceDB" does not exist
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|214_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
  Exception data:
    Severity: FATAL
    SqlState: 3D000
    MessageText: database "InsuranceDB" does not exist
    File: postinit.c
    Line: 890
    Routine: InitPostgres
Npgsql.PostgresException (0x80004005): 3D000: database "InsuranceDB" does not exist
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|214_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
  Exception data:
    Severity: FATAL
    SqlState: 3D000
    MessageText: database "InsuranceDB" does not exist
    File: postinit.c
    Line: 890
    Routine: InitPostgres
2025-06-17 01:47:18.722 +02:00 [ERR] An error occurred while retrieving insurances.
Npgsql.PostgresException (0x80004005): 3D000: database "InsuranceDB" does not exist
   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|214_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync[TSource](IQueryable`1 source, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync[TSource](IQueryable`1 source, CancellationToken cancellationToken)
   at InsuranceAPI.Features.Insurance.Repositories.InsuranceRepository.GetAllInsurancesAsync() in /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI/Features/Insurance/Repositories/InsuranceRepository.cs:line 65
   at InsuranceAPI.Features.Insurance.Services.InsuranceService.GetAllInsurancesAsync() in /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI/Features/Insurance/Services/InsuranceService.cs:line 75
  Exception data:
    Severity: FATAL
    SqlState: 3D000
    MessageText: database "InsuranceDB" does not exist
    File: postinit.c
    Line: 890
    Routine: InitPostgres
2025-06-17 01:47:18.733 +02:00 [INF] Setting HTTP status code 404.
2025-06-17 01:47:18.741 +02:00 [INF] Writing value of type 'ProblemDetails' as Json.
2025-06-17 01:47:18.749 +02:00 [INF] Executed endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:47:18.753 +02:00 [INF] Request finished HTTP/1.1 GET http://localhost:5096/api/v1/insurances - 404 null application/problem+json 1017.3238ms
2025-06-17 01:50:34.174 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:5096/api/v1/insurances - null null
2025-06-17 01:50:34.178 +02:00 [INF] Executing endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:50:34.192 +02:00 [INF] No data found in cache for key: AllInsurances
2025-06-17 01:50:34.320 +02:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT i."Id", i."CreatedAt", i."EndDate", i."InsuranceProductId", i."InsuredItem", i."PersonalIdentificationNumber", i."StartDate", i."UpdatedAt", i0."Id", i0."Code", i0."CreatedAt", i0."Name", i0."Price", i0."UpdatedAt"
FROM "Insurances" AS i
INNER JOIN "InsuranceProducts" AS i0 ON i."InsuranceProductId" = i0."Id"
2025-06-17 01:50:34.389 +02:00 [INF] Retrieved 3 insurances from the database.
2025-06-17 01:50:34.435 +02:00 [INF] Setting data in cache for key: AllInsurances
2025-06-17 01:50:34.441 +02:00 [INF] Successfully set data in cache for key: AllInsurances
2025-06-17 01:50:34.442 +02:00 [INF] Fetching car registrations for personal identification numbers: PIN1001
2025-06-17 01:50:34.450 +02:00 [INF] Start processing HTTP request POST http://localhost:5059/api/v1/vehicles/personal/
2025-06-17 01:50:34.456 +02:00 [INF] Sending HTTP request POST http://localhost:5059/api/v1/vehicles/personal/
2025-06-17 01:50:34.974 +02:00 [INF] Sending HTTP request POST http://localhost:5059/api/v1/vehicles/personal/
2025-06-17 01:50:36.070 +02:00 [ERR] An error occurred while retrieving insurances.
Polly.CircuitBreaker.BrokenCircuitException: The circuit is now open and is not allowing calls.
 ---> System.Net.Http.HttpRequestException: Connection refused (localhost:5059)
 ---> System.Net.Sockets.SocketException (61): Connection refused
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.InjectNewHttp11ConnectionAsync(QueueItem queueItem)
   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.DiagnosticsHandler.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.<SendCoreAsync>g__Core|4_0(HttpRequestMessage request, Boolean useAsync, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken)
   at Polly.CircuitBreaker.AsyncCircuitBreakerEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1 shouldHandleResultPredicates, ICircuitController`1 breakerController)
   at Polly.AsyncPolicy`1.ExecuteAsync(Func`3 action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken)
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext)
   --- End of inner exception stack trace ---
   at Polly.CircuitBreaker.CircuitStateController`1.OnActionPreExecute()
   at Polly.CircuitBreaker.AsyncCircuitBreakerEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext, ExceptionPredicates shouldHandleExceptionPredicates, ResultPredicates`1 shouldHandleResultPredicates, ICircuitController`1 breakerController)
   at Polly.AsyncPolicy`1.ExecuteAsync(Func`3 action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken)
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext)
   at Polly.AsyncPolicy`1.ExecuteAsync(Func`3 action, Context context, CancellationToken cancellationToken, Boolean continueOnCapturedContext)
   at Microsoft.Extensions.Http.PolicyHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.<SendCoreAsync>g__Core|4_0(HttpRequestMessage request, Boolean useAsync, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.<SendAsync>g__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)
   at InsuranceAPI.HttpClients.CarRegistrationAPIClient.GetCarRegistrationsByPersonIdsAsync(PersonIdentifiersRequest personIdsRequest) in /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI/HttpClients/CarRegistrationAPIClient.cs:line 52
   at InsuranceAPI.Features.Insurance.Services.InsuranceService.CallAPIForCarRegistrationsAsync(IEnumerable`1 carInsurances) in /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI/Features/Insurance/Services/InsuranceService.cs:line 137
   at InsuranceAPI.Features.Insurance.Services.InsuranceService.GetAllInsurancesAsync() in /Users/vivekkosare/Development/VehicleInsurance/InsuranceAPI/Features/Insurance/Services/InsuranceService.cs:line 94
2025-06-17 01:50:36.076 +02:00 [INF] Setting HTTP status code 404.
2025-06-17 01:50:36.076 +02:00 [INF] Writing value of type 'ProblemDetails' as Json.
2025-06-17 01:50:36.076 +02:00 [INF] Executed endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:50:36.077 +02:00 [INF] Request finished HTTP/1.1 GET http://localhost:5096/api/v1/insurances - 404 null application/problem+json 1902.7522ms
2025-06-17 01:51:14.427 +02:00 [INF] Request starting HTTP/1.1 GET http://localhost:5096/api/v1/insurances - null null
2025-06-17 01:51:14.428 +02:00 [INF] Executing endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:51:14.470 +02:00 [INF] Successfully retrieved data from cache for key: AllInsurances
2025-06-17 01:51:14.470 +02:00 [INF] Found insurances in cache for key: AllInsurances
2025-06-17 01:51:14.470 +02:00 [INF] Fetching car registrations for personal identification numbers: PIN1001
2025-06-17 01:51:14.471 +02:00 [INF] Start processing HTTP request POST http://localhost:5059/api/v1/vehicles/personal/
2025-06-17 01:51:14.471 +02:00 [INF] Sending HTTP request POST http://localhost:5059/api/v1/vehicles/personal/
2025-06-17 01:51:14.649 +02:00 [INF] Received HTTP response headers after 175.7186ms - 200
2025-06-17 01:51:14.649 +02:00 [INF] End processing HTTP request after 178.3601ms - 200
2025-06-17 01:51:14.665 +02:00 [INF] Retrieved 1 car insurances with details.
2025-06-17 01:51:14.665 +02:00 [INF] Setting HTTP status code 200.
2025-06-17 01:51:14.668 +02:00 [INF] Writing value of type 'Concat2Iterator`1' as Json.
2025-06-17 01:51:14.674 +02:00 [INF] Executed endpoint 'HTTP: GET /api/v1/insurances/'
2025-06-17 01:51:14.675 +02:00 [INF] Request finished HTTP/1.1 GET http://localhost:5096/api/v1/insurances - 200 null application/json; charset=utf-8 248.1906ms
